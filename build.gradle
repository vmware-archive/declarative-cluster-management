/*
 * This file was generated by the Gradle 'init' task.
 */


plugins {
  id "com.github.spotbugs" version "4.3.0"
  id "net.ltgt.errorprone" version "1.2.1"
  id "checkstyle"
  id "jacoco"
  id "com.github.kt3k.coveralls" version "2.10.1"
}

allprojects {
    group = 'org.dcm'
    version = '1.0-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: "com.github.spotbugs"
    apply plugin: "checkstyle"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "jacoco"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        implementation 'org.apache.logging.log4j:log4j-api:2.13.3'
        implementation 'org.apache.logging.log4j:log4j-core:2.13.3'
        implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.13.3'
        implementation 'org.jooq:jooq:3.13.1'
        implementation 'org.jooq:jooq-meta:3.13.1'
        implementation 'com.google.guava:guava:29.0-jre'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0-M1'
        spotbugs 'com.github.spotbugs:spotbugs:4.0.4'
        errorprone "com.google.errorprone:error_prone_core:2.4.0"
    }

    spotbugs {
       effort = "Max"
       excludeFilter = file("../build-common/src/main/resources/findbugs-exclude.xml")
    }

    checkstyle {
       toolVersion = "6.11.2"
    }


    tasks.withType(JavaCompile).configureEach {
       options.errorprone.disableWarningsInGeneratedCode = true
       options.errorprone.excludedPaths = "(.*/annotations/org/dcm/generated/.*|.*/org/dcm/k8s/generated/.*)"
    }

    sourceCompatibility = '12'

    publishing {
        publications {
            maven(MavenPublication) {
                from(components.java)
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
    }

    jacocoTestReport {
        reports {
           xml.enabled = true // coveralls plugin depends on xml format report
           html.enabled = true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
               fileTree(dir: it, exclude: '**/generated/**')
            }))
        }
    }
}


// task to gather code coverage from multiple subprojects
// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
// that `test` (or other tasks generating code coverage) run before generating the report.
// You can achieve this by calling the `test` lifecycle task manually
// $ ./gradlew test codeCoverageReport
tasks.register("codeCoverageReport", JacocoReport) {

    repositories {
        mavenLocal()
        mavenCentral()
    }


    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        // xml is usually used to integrate code coverage with
        // other tools like SonarQube, Coveralls or Codecov
        xml.enabled true

        // HTML reports can be used to see code coverage
        // without any external tools
        html.enabled true
    }
}


