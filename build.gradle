/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
  id "com.github.spotbugs" version "${spotbugsPluginVersion}"
  id "net.ltgt.errorprone" version "${errorPronePluginVersion}"
  id "checkstyle"
  id "jacoco"
  id "com.github.kt3k.coveralls" version "${coverallsPluginVersion}"
}

allprojects {
    group = "${dcmGroupId}"
    version = "${dcmVersion}"
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: "com.github.spotbugs"
    apply plugin: "checkstyle"
    apply plugin: "net.ltgt.errorprone"
    apply plugin: "jacoco"

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
        implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
        implementation "org.jooq:jooq:${jooqVersion}"
        implementation "org.jooq:jooq-meta:${jooqVersion}"
        implementation "com.google.guava:guava:${guavaVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter:${junitJupiterVersion}"
        spotbugs "com.github.spotbugs:spotbugs:${spotbugsVersion}"
        compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
        errorprone "com.google.errorprone:error_prone_core:${errorproneVersion}"
    }

    spotbugs {
       effort = "Max"
       excludeFilter = file("../config/spotbugs/findbugs-exclude.xml")
    }

    checkstyle {
       toolVersion = "${checkstyleVersion}"
    }

    tasks.withType(JavaCompile).configureEach {
       options.errorprone.disableWarningsInGeneratedCode = true
       options.errorprone.excludedPaths = "(.*/com/vmware/dcm/generated/.*|.*/com/vmware/dcm/k8s/generated/.*)"
    }

    sourceCompatibility = "${commonSourceLevel}"

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    // Example to configure HTML report
    spotbugsMain {
        reports {
            html {
                enabled = true
                destination = file("$buildDir/reports/spotbugs/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }

    jacocoTestReport {
        reports {
           xml.enabled = true // coveralls plugin depends on xml format report
           html.enabled = true
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
               fileTree(dir: it, exclude: '**/generated/**')
            }))
        }
    }
}



task codeCoverageReport(type: JacocoReport) {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    // Gather execution data from all subprojects
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/generated/**', '**/**Benchmark**'])
        }))
    }
}
